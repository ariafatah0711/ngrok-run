#!/bin/bash

# Daftar tunnel dengan path ke file config masing-masing
declare -A TUNNELS
# TUNNELS["tun-1"]="/etc/ngrok-run/config.yaml"
TUNNELS["tun-2"]="/home/ariafatah/config-1.yaml"
TUNNELS["tun-3"]="/home/ariafatah/config-2.yaml"

PID_DIR="/tmp/ngrok-run-pids"  # Direktori untuk menyimpan PID file

# Buat direktori untuk menyimpan PID file
mkdir -p "$PID_DIR"

start_ngrok() {
    local tunnel="$1"

    if [[ "$tunnel" == "all" ]]; then
        echo "Starting all Ngrok tunnels..."
        local i=4040
        for key in "${!TUNNELS[@]}"; do
            echo "Starting tunnel: $key on Web Interface Port: $i"
            ngrok start --config "${TUNNELS[$key]}" --all --log "stdout" --log-format "term" --log-level "info" 1>/dev/null &

            # Simpan PID dari proses yang baru saja dijalankan
            local ngrok_pid=$!
            echo "$ngrok_pid #$key" > "$PID_DIR/$key.pid"

            ((i++))  # Increment port for next tunnel
        done
    elif [[ -n "${TUNNELS[$tunnel]}" ]]; then
        echo "Starting Ngrok tunnel: $tunnel..."
        ngrok start --config "${TUNNELS[$tunnel]}" --all --log "stdout" --log-format "term" --log-level "info" 1>/dev/null &

        # Simpan PID dari proses yang baru saja dijalankan
        local ngrok_pid=$!
        echo "$ngrok_pid #$tunnel" > "$PID_DIR/$tunnel.pid"
    else
        echo "Error: Tunnel '$tunnel' not found."
        exit 1
    fi

    # list_tunnels
}

# Fungsi untuk menghentikan Ngrok
stop_ngrok() {
    local tunnel="$1"

    if [[ "$tunnel" == "all" ]]; then
        echo "Stopping all Ngrok tunnels..."
        pkill ngrok
        rm -f "$PID_DIR"/*.pid  # Hapus semua file .pid setelah stop all
    elif [[ -n "${TUNNELS[$tunnel]}" ]]; then
        echo "Stopping Ngrok tunnel: $tunnel..."
        
        # Baca PID dari file .pid
        if [[ -f "$PID_DIR/$tunnel.pid" ]]; then
            local pid=$(awk '{print $1}' "$PID_DIR/$tunnel.pid")

            # Verifikasi apakah proses dengan PID tersebut memang untuk tunnel ini
            if ps -p "$pid" | grep -q "#$tunnel"; then
                kill "$pid"
                echo "Tunnel $tunnel has been stopped."
                rm -f "$PID_DIR/$tunnel.pid"  # Hapus file .pid setelah proses dimatikan
            else
                echo "No running process found for tunnel: $tunnel"
            fi
        else
            echo "PID file for tunnel $tunnel not found."
        fi
    else
        echo "Error: Tunnel '$tunnel' not found."
        exit 1
    fi
}

# Fungsi untuk menampilkan semua tunnel yang sedang berjalan
list_tunnels() {
    local port=4040
    for key in "${!TUNNELS[@]}"; do
        echo -e "Fetching tunnels from Web Interface on port $port..."
        response=$(curl -s http://localhost:$port/api/tunnels)
        if [[ $? -eq 0 ]]; then
            echo "$response" | jq -r '.tunnels[] | {url: .public_url, addr: .config.addr, proto: .proto} | @base64' | while read line; do
                _jq() {
                    echo "${line}" | base64 --decode | jq -r "${1}"
                }
                if [[ $(_jq '.proto') == "tcp" ]]; then
                    echo "TCP URL: $(_jq '.url') --> Forwarding to: $(_jq '.addr')"
                else
                    echo "HTTP URL: $(_jq '.url') --> Forwarding to: $(_jq '.addr')"
                fi
            echo -e "\n"
            done
        else
            echo "No tunnels found on port $port."
        fi
        ((port++))  # Increment port for next tunnel
    done
}

# Main case statement untuk mengelola perintah
case "$1" in
    start)
        case "$2" in
            all)
                start_ngrok "all"
                ;;
            *)
                if [[ -z "$2" ]]; then
                    echo "Starting all tunnels by default..."
                    start_ngrok "all"
                else
                    start_ngrok "$2"
                fi
                ;;
        esac
        ;;
    stop)
        if [[ -z "$2" ]]; then
            echo "No specific tunnel provided. Stopping all tunnels by default..."
            stop_ngrok "all"
        else
            case "$2" in
                all)
                    stop_ngrok "all"
                    ;;
                *)
                    stop_ngrok "$2"
                    ;;
            esac
        fi
        ;;
    list)
        list_tunnels
        ;;
    *)
        echo "Usage: $0 {start|stop|list} [tun-1|tun-2|all]"
        ;;
esac
